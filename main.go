package main

import (
	"TelegramBot/config"
	"TelegramBot/internal/database"
	"TelegramBot/utils"
	"fmt"
	"log"
	"os"
	"time"

	_ "github.com/go-sql-driver/mysql"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	database.Init()
	defer database.Close()

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Panic("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	bot.Debug = true

	chatID := int64(837127109)

	users, err := database.GetTodayBirthdays()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞:", err)
	}
	if len(users) != 0 {
		messageText := fmt.Sprintf("üéÇ –°–µ–≥–æ–¥–Ω—è —É %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π) –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n", len(users))
		for i, user := range users {
			messageText += fmt.Sprintf("%d. %s %s - %d –ª–µ—Ç\n",
				i+1,
				user.FirstName,
				user.LastName,
				user.Age)
			if user.TelegramUsername != "" {
				messageText += fmt.Sprintf("   üë§ @%s\n", user.TelegramUsername) //update.Message.From.UserName
			}
			messageText += "\n" // –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
		}
		msg := tgbotapi.NewMessage(chatID, messageText)
		bot.Send(msg)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		if update.Message.Text != "" {
			exists, err := database.UserExists(update.Message.From.ID) //userID
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
				return
			}
			if exists {

				if update.Message.IsCommand() {
					switch update.Message.Command() {
					case "addusercontact":
						chatID := update.Message.Chat.ID

						// –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º
						config.UserS_D[chatID] = &config.UserStateData{State: config.StateWaitingFIO}

						msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω–æ–≤–∏—á")
						bot.Send(msg)
						continue
					}
				}

				// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞)
				if _, exists := config.UserS_D[update.Message.Chat.ID]; exists {
					handleUserState(bot, update, config.UserS_D[chatID].State)
					continue
				}

				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã —Å–∫–∞–∑–∞–ª–∏: "+update.Message.Text)
				if _, err := bot.Send(msg); err != nil {
					log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				}
			} else {
				assetPaths := config.NewAssetPaths()
				utils.SendRedGif(bot, update.Message, assetPaths)
			}
		}
	}
}

func handleUserState(bot *tgbotapi.BotAPI, update tgbotapi.Update, state string) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text
	switch state {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
	case config.StateWaitingFIO:
		firstName, lastName, middleName, err := utils.SplitTextToThreeVars(text) //–î–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –±–æ–ª—å—à–µ 3 —Å–ª–æ–≤
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ") //
			bot.Send(msg)
			return
		}
		config.UserS_D[chatID].FirstName = firstName
		config.UserS_D[chatID].LastName = lastName
		config.UserS_D[chatID].MiddleName = middleName
		config.UserS_D[chatID].State = config.StateWaitingDate

		msg := tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1990-05-15")
		bot.Send(msg)
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º TelegramUsername
	case config.StateWaitingDate:
		birthDate, err := time.Parse("2006-01-02", text) //–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥–∞—Ç—É
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
			bot.Send(msg)
			return
		}

		config.UserS_D[chatID].BirthDate = birthDate
		config.UserS_D[chatID].State = config.StateWaitingUsername

		msg := tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram username (–±–µ–∑ @):\n–ù–∞–ø—Ä–∏–º–µ—Ä: ivanov90")
		bot.Send(msg)
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º TelegramUsername –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
	case config.StateWaitingUsername:
		config.UserS_D[chatID].TelegramUsername = text //–ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ—Å–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å?

		exists, err := database.AddUserContact(config.UserS_D[chatID].FirstName, config.UserS_D[chatID].LastName, config.UserS_D[chatID].MiddleName, config.UserS_D[chatID].TelegramUsername, config.UserS_D[chatID].BirthDate) //–ü–æ–º–µ–Ω—è—Ç—å + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É –±—É–∫–≤—ã
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
			bot.Send(msg)
			return
		}
		if exists {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c Telegram username: %s —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î", config.UserS_D[chatID].TelegramUsername)) //
			bot.Send(msg)
			delete(config.UserS_D, chatID)
		}
		delete(config.UserS_D, chatID)
	}
}
