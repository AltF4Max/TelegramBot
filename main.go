package main

import (
	"TelegramBot/config"
	"TelegramBot/internal/database"
	"TelegramBot/utils"
	"fmt"
	"log"
	"os"
	"time"

	_ "github.com/go-sql-driver/mysql"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	database.Init()
	defer database.Close()

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Panic("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}
	///
	chatID := int64(837127109)
	users, err := database.GetTodayBirthdays()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞:", err)
	}
	if len(users) != 0 {
		messageText := fmt.Sprintf("üéÇ –°–µ–≥–æ–¥–Ω—è —É %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π) –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n", len(users))
		for i, user := range users {
			messageText += fmt.Sprintf("%d. %s %s - %d –ª–µ—Ç\n",
				i+1,
				user.FirstName,
				user.LastName,
				user.Age)
			if user.TelegramUsername != "" {
				messageText += fmt.Sprintf("   üë§ @%s\n", user.TelegramUsername)
			}
			messageText += "\n" // –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
		}
		msg := tgbotapi.NewMessage(chatID, messageText)
		bot.Send(msg)
	}
	///
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	bot.Debug = true

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		if update.Message.Text != "" {
			exists, err := database.UserExists(update.Message.From.ID) //userID
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
				return
			}
			if exists {
				if update.Message.IsCommand() {
					switch update.Message.Command() {
					case "adduser":
						chatID := update.Message.Chat.ID
						// –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º
						config.MapUserStateData[chatID] = &config.UserStateData{State: config.StateWaitingFIO}
						msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω–æ–≤–∏—á")
						bot.Send(msg)
						continue
					case "deleteuser":
						config.MapUserStateData[chatID] = &config.UserStateData{State: config.StateWaitingDeleteUsername}
						msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ Telegram username (–±–µ–∑ @) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–ø—Ä–∏–º–µ—Ä: ivanov_90")
						bot.Send(msg)
						continue
					case "showall":
						users, err := database.GetAllUsers()
						if err != nil {
							msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: "+err.Error())
							bot.Send(msg)
							continue
						}
						if len(users) == 0 {
							msg := tgbotapi.NewMessage(chatID, "üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
							bot.Send(msg)
							continue
						}
						message := "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
						for i, user := range users {
							message += fmt.Sprintf("   %d. %s %s %s\n", i+1, user.LastName, user.FirstName, user.MiddleName)
							message += fmt.Sprintf("   üë§ @%s\n", user.TelegramUsername)
							message += fmt.Sprintf("   üéÇ %s\n\n", user.BirthDate.Format("02.01.2006"))
						}
						msg := tgbotapi.NewMessage(chatID, message)
						bot.Send(msg)
						continue
					}

				}
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞)
				if _, exists := config.MapUserStateData[update.Message.Chat.ID]; exists {
					handleUserState(bot, update, config.MapUserStateData[chatID].State)
					continue
				}
				// –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã —Å–∫–∞–∑–∞–ª–∏: "+update.Message.Text)
				if _, err := bot.Send(msg); err != nil {
					log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				}
			} else {
				assetPaths := config.NewAssetPaths()
				utils.SendRedGif(bot, update.Message, assetPaths)
			}
		}
	}
}

func handleUserState(bot *tgbotapi.BotAPI, update tgbotapi.Update, state string) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text
	switch state {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
	case config.StateWaitingFIO:
		firstName, lastName, middleName, err := utils.SplitTextToThreeVars(text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ")
			bot.Send(msg)
			return
		}
		config.MapUserStateData[chatID].FirstName = firstName
		config.MapUserStateData[chatID].LastName = lastName
		config.MapUserStateData[chatID].MiddleName = middleName
		config.MapUserStateData[chatID].State = config.StateWaitingDate

		msg := tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1990-05-15")
		bot.Send(msg)
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º TelegramUsername
	case config.StateWaitingDate:
		birthDate, err := time.Parse("2006-01-02", text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
			bot.Send(msg)
			return
		}
		// –û–±—Ä–µ–∑–∞–µ—Ç –≤—Ä–µ–º—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
		today := time.Now().Truncate(24 * time.Hour)
		if birthDate.After(today) {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞. %s –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª", text))
			bot.Send(msg)
			return
		}
		config.MapUserStateData[chatID].BirthDate = birthDate
		config.MapUserStateData[chatID].State = config.StateWaitingUsername

		msg := tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram username (–±–µ–∑ @):\n–ù–∞–ø—Ä–∏–º–µ—Ä: ivanov_90")
		bot.Send(msg)
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º TelegramUsername –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
	case config.StateWaitingUsername:
		isValid, errorMsg := utils.IsValidUsername(text)
		if !isValid {
			msg := tgbotapi.NewMessage(chatID, "‚ùå "+errorMsg)
			bot.Send(msg)
			return
		}
		config.MapUserStateData[chatID].TelegramUsername = text

		exists, err := database.AddUserContact(config.MapUserStateData[chatID])
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
			bot.Send(msg)
			return
		}
		if exists {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c Telegram username: %s —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î", text))
			bot.Send(msg)
			return //
		} else {
			msg := tgbotapi.NewMessage(chatID, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
			bot.Send(msg)
		}
		delete(config.MapUserStateData, chatID)
	case config.StateWaitingDeleteUsername:
		isValid, errorMsg := utils.IsValidUsername(text)
		if !isValid {
			msg := tgbotapi.NewMessage(chatID, "‚ùå "+errorMsg)
			bot.Send(msg)
			return
		}
		exists, err := database.DeleteUserContact(text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
			bot.Send(msg)
			return
		}
		if exists {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c Telegram username: %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î", text))
			bot.Send(msg)
			return //
		} else {
			msg := tgbotapi.NewMessage(chatID, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
			bot.Send(msg)
		}
		delete(config.MapUserStateData, chatID)
	}
}
